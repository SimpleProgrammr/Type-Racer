<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIACSGgAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAlw
        SFlzAAALEwAACxMBAJqcGAAAGkRJREFUeJztnQlwXVd5xz/v+77v8iJHtmzLlm150eJFki3ZsmVLluQt
        seMtzuIYEofimc70ULawtB1opzTQzhRm2gItTSmlJO2UAqWEtkPrJBNCSwiUADOEBhockpQlp993r2Rb
        7537dN97975z3z3/38x/4khP55537zn/e9bvEAEAAAAAAAAAAAAAAAAAAAAAAAAAgLQwjfUA6ynWy6y/
        YbWxhtnMFAAgXqpYH2C9wtIGfZP1a+QbBAAgBYxm9bD+nsyV3qSfsh5hrbaQXwBABMwl/23+XQpf8TP1
        BvnGIQYyorTZBwAUwkbWx1g/p8IrProHAJQRE1l3kT+oF6pCjxw1Wi9aulJXb9imp8+cm48RyKDhB1kr
        S/btAABGVrAeZr1EISvw+ImTdOXqDbppb5feta/3hrbu2KcXL69iYxiF7gEACWY4q4X1GfIr4ZCVdfjw
        4Xr2vEV6fd2OQZXepKY9Xfq2NZvYKCbn0yp4jtA9ACBWprIus56nkBVz9Jix3lt9++4Oc4Xf36dbOo4Z
        f7ezvcczjBmz5+djBAOzB9UluysApBwZ1JNK9TMKWREnTZmmV9XUcSU+YqzczVzpO46c0Uduv0/3nb6s
        u47frdsO3+EZgunz6B4AUFrynrsfPnyEnrtgid7csCewed968IQ+ePS87j19v1fxM9VzxyXd0XNG795/
        FN0DACwwn6VYL1LICjZu/ES9/LZ1uqH1UGAzX97u3SfvNlZ6o07drzuPXmDDOI7uAQAloIH1SdYvKERl
        GjZsmJ42c45eu6kh8G3fcuC47ug9673VQ1d8g4bsHuxE9wCAQpjEusB6mkK+RUeOHKUXVlTqbTv3B1b8
        vYdu14eO3VVUpUf3AID4kAU0Mnf/Y8pjUE8qV9PebmPl281v531dp/WRk/dGXvHRPQCgeGTu/gD5Td/I
        5u5buZl/oPec7j1lHtSLW+geAJCb2eQ3cb9DId+GN+fuDwS87Xu9Snf4+EUrlT5X96C5A90DAISBuftX
        KWSBnzJtprcuX5rQ5rn7o4Pm7hMpdA+Aw4whv+n6FQpZuEeMHKnnL16m6xr35py7l0rVeyoBFRzdAwCy
        WEb+oN6PKGTFHz9hkjd33xgwdy/N/PauU7q7FIN6MQvdA5BGJHaebMiRuftfUohCG2ru/qA/d99b5Nx9
        IoXuAUgBk8mfu3+Gwg7qjR7jNXW37QrYkNM/d384hrn7pArdA1BuDBVMM0sDc/c7gubuuUm8v/tOfeSO
        BA/qxSx0D0CSkTdJQXP3tdt25xzUkw05fZbm7hMpdA9Agsg7mOaYseN0RWW1bmjpDKj4fYmbu0+q0D0A
        tsg7mKYM6uWau2/p33ff43Azv1ChewBKwVjWHaxrFLIQyYYcb+6+qS2wmb+n86S/IQfN/OKF7gGIgciC
        ad6cuz/qbchJw9x9UoXuASiGgWCaec3dy5sl14acG/vu8bYvmcJ2DyagewCYKRR1ME0H5+4TKXQPQA5q
        KeZgmrZ0kFsczZyfxuYDuq6+VddsatRVazbqpZXVesHiZXrOvEV62ozZnqZMm6EnTpriSWYrZGHSBO7O
        yP/L9x343Oy5C/Wc+Yv1oopKXVlVo9es36prt+7U27lZvbvtiG47dFIf4spmvdIHqPvkPd7yaXQP3MZK
        MM2oJfv727mvK5WvZlODXlG1Ts/jPEqFHT5iRD5vs8glJwpNnT5LL1yywjOdTdt26x17Duv93acTsYQZ
        3QM3mUf+A/oehXyoN4JptuQOptl14p5YC6x0I3a1desN3FSVN/j0mXP0iBEjrVbyQjWCzUnyv2zlGr1x
        6y6vldId8/0LFLoHTlBQMM3c++6PeW+QYoNpBmlf1x26rqFVL+PKPpnf6GHyXc6Sez5p8lSva7Ghrkm3
        8pu51BGMYugeiL5M6B5YYSCYZviDMPMJphlx4Ww/fLtev7mJ++bL9dix461XyCRIuhHS7VrLRry7/UjJ
        xlTQPSh/rpDfDAv1cKTPXLVuc/CGnBiCacrbpqH5AHcv1uZbkPKoQKP0RH6rSvN17sIK75TfZXy927hP
        vqZ2u96wZafeVN/qSRYsbWXjE8lSZYlBIDsT5f+37Gi/8bkN3GSvYaNavX6Lt96hYsVqz7RmzV3o9fnl
        u8Q1/iDpzpqzQK/lvO/lJnvsZhCie7BuU6OePiuvU5Nl0PDRoks4CGQ3hSlMw4frOfOX6I3bm4MH9SIO
        pimj8tKHl1H0qCrJqNGjvdF5GWyTCrl2Y703UNnYejjwe4VRM5uevAFl/YLEH/D+e4vkd95npLlsaDLX
        Nx/0Njutqtmil1au8QxIDGIUv9Wj+N4iGZ+RcYT63R2xjyEM1T0Qk1zAz0CiN4XM//koCz24yVXKcePH
        cPN62cq1uj5gQ85AlJ2uE3mckJNDnX3ndS2/aeXNJf3cXHkbSrKefe6CCr28qkbXcD85KCBo0JjFnkMn
        ve+2/8gZz9jk7Xb42EWvcEvzuphFSr2nLnl7GWSFo6zEk26SzIh09Jz1Wk/SdZI3qbSmZN3Euk0NXmtE
        dkVK5KNi743M0oixisGK0cZlBHKf9h+509umbbrPjXsOe0Ys5jREnv86ltIPglsA0jwNipkfZTBNGbGX
        aS+ZMy+0YMsIv7zZl6xY5TUzA4/0yuiq7Ok8odu7T3MFP8uV8KJXIUs1LRnaLLiPLaYjBtTRe8abRRHj
        rd3WzKawjrss87z+fyH3TST3XAxXZhg6ZUt1HN8jRPdAzC1HPj8SXxUAb6eAGz9j1rxBff0og2nu3Nul
        F3M/u5DmvRRaaSJL62RjfUvg7MONys6GtZff6GJanWw4JTnsI25xpeq+/V6v9SBvWWnay2DbnAVL9Nhx
        hQ2Myn2dyy2DOr6ncW2zNnUPVq7ZOFTeVHzFHwgy4mq8+VLRpH8fxYacg33n9Lra7d6KuaDrBWns+Ane
        ANqa2nqv6ThUE76NC9lBbrq7tpFIzK2z74I3MLmyutabopUxnHzvt3QTZAWkrIyMY4pxYPZABkhDtPxU
        jGUf9HOR9SsyPABpXhezZFVGoaXyDsuzIEp/V5r1uVYUDgzCySo/aZ24HA7MJOlCHOg5pzfxW13WDYiR
        5vMMRNJHX11Txy2oOyPNm6zKHDYsVJlQMZZ7cAvHKWAB0OQp0703ar4PWZaz5rMYRMYeJBJQrrj+A90R
        adJHNQDpimTwcWdbtzelKgYb9rnQLV0Eqbg9RY7/NHCXJY8Xgoqz0IPBSMy+1yigckqFzudBy6YaU1q3
        atToMd6ios2Nud/0Mmh3sO+89Y1DaZIsLV5RVZO3GcgmKFljUMg1ZZ9DjrGfrxt+pmIt8SCLXazrFNAs
        l6W3YR92NffxTOl4cQFmzfMW2exoM+8UFHlx/Xvs7xZ0QS3clRIzkMptemYmye7GfK4hg78jgiv/58g8
        KK3iLvAgm0bW/5LhQcko815ughdqALISLte8vBf3r/eMN8ptu1K4KBk3aODnI0uLh2qmz1+0NHS60trI
        0R38O/LDySnD71T8xR2YkP3/xuO5pNnesr+3IAOQRS2min9j70ACKgHkS6YD5S0/eep0Y8WVMYEw6Ujr
        Isd6hX9iTegvc8rwexV3QQfBrKKALcGyIWgn9+eKMYCW/iXEiPKbfMmCrcxnGcYApLUoEaFMZYj8g18n
        3VLelOEzKtYSDoakgvwdWlkPUAZzZES3UAOwXaih8GpsOZhtANxNyPU3bZ0nco0p/Adl7/hThs+puAo2
        CI8ECHmaTCbA/USZGjIaQA0MIC1qbM42gHk5DGBf1yk9blzguoMnWTMM5UwZPqtiKdEgb2aT79pZD1RG
        9TfXt8AAUiyzAVQYP3ug54wXJ9FUVljfIP+0KBPK8HkVeUkGBTOV9c8UMCq8fnPj0AawEgZQjpJlwZnP
        ct7CbAPwK39g3IZvsubnKF/K8DcqygIMikdGbGXaxviQV63dBANIoRoMBjB/4eBpQNnSnSMs23+TP56U
        C2X4OxVRuQURMob1lxRgApWramAAKZOsDch8lreuA5D9IkHTheTPJC0LUa6U4W9VFAUWRI8Eb/woBZiA
        rDeXTSSZP4cBlKfMBrDM+13X8YveprGAsvBD8qeTw6AMf6+KLaggPsQEPkwBJiCHaGT+zEUDkOg7MiIu
        kqhHtvNTmAF0ZD3LBWwAUvkldHlAGZCFZGvyKE/KkIYqpoCC+BnGej8FmECmlq5c45QBSJTezHvQ3N5j
        PV/5qt5gADIGIBGFAp61LCXfmGdZUoZ0VCGFEpSewMAi5LABSBCUzHuwrsCddEkzgByLfF5m1RVQhpQh
        LVVAOsASD5IfzhkG0C/Takj5me185W0Au/aHauGxXiH/gJlCUIb0VIFpAUvIISPG6EIi2fsPA0itAbzK
        ai6i7ChDmqqI9IAljrF+ToZCInEAYACpNID/Y7UXWW6UIV1VZJrAEgdZv6SMByohoGEAqTMAMftDEZQZ
        ZUhbRZAusETWOgE5IgsGUH4GsGFzU1DlF5Pvi6i8KEP6KqK0gQUUZRpAZTUMoAwNoHr9VlPllwHfU3GW
        F4IBlDWKYACpMICtTXtNBvDvcZcXggGUNYqyDABdgHI0gG072k0G8OdxlxeCAZQ1imAA6TCApjaTAXwy
        7vJCMICyRhEGAVNhAAFdABgAyImilBqARMy9ITmks/u0UVWGwy/L0gAajQbwibjLC8EAyhpFGQ9UzvtL
        igHIwZcSxEKCV0qEY3nLbahr0qvXbdZLuasiZxrOmb/Y2+o6afI0PW78hKKO4x6QHI4xfsJETnOql7Yc
        jy6nJVdW1XjmIDsGpc+9u+2I3t91KhEHo2yBAYACUGTZAORQSzmRpq6+1atcFXx9qXBySrGcgpuZv6Rq
        7Njxetr0Wd4e/JWr1nsm0dR6yGtlyGEesRtAwx5Tvj4ebXGBAaQNRZkGsDx6A5Bz51s7jvIbvM0LQiIn
        4U6dPpPftCOtV9xSSCIzS2tC9udL60VaD22HTnrHcEd1j8VADdf+0yLLRybKcA0V8TVACVGUywAKOHv+
        YO9Z3dTS6W2plYo+acq0MGfMOylp4YgRLl2xWm/cusszyUIPYZGoz4ZrfLSAMpELZbiGivgaoIQoymUA
        p3MbgAyuNbV2ek13iUGfz8GVJdDPWD++Rc+zvmXQqwnI6yBTkAg+K6rWeWMeEsU3lAFsbzal90dhC0JI
        lOEaKuJrgBKiKMsAqowtABmQk2Ok5E1VwSYxKTi6bNSSyDXPsr5E/rTWB1m/zjrH6mG1sraQH9duIWty
        sfeA9TBrSX+aEjVnD+sE6zL5J+Q+wnqU9WXWC2TYVBWlJIx3BT8XqeT7DptPfzYdDcb6gzzvRSH3SkV8
        DVBCFGU80MX9BrCzvUfv4Qov8fJktD3H+XHFSuLS/Sv5lfs9rLtZbawq8k+kjRtlyJPKM42RrMXkB9o4
        znor6w/JP1jzRUP6RUmOgV9WWe2d+HS4/8BWMWbDZ38vz+8xFMpwDRXxNUAJUZTxQKdMm+kdET5qdPHT
        abdINqV8h/UY67dY58mvLNNL8B2HQlH8hVrO2JNWyinWe8k/t+GHhuvmLRlfmT5zrjdzYvj970T8PZTh
        Giria4ASoij6N7oEnvga6yPkv82l4E8s0fcpBEX2CrWc6biX/HiNsm7/BUNeitH7Is6vMlxDRXwNUEIU
        FVfAJLTYU6wPkd8nr2WNLuUXiABFySrUMo4hYxu/Tf4xb69T4c/nXRHnTRmuoSK+Bighv0H5FajrrH9g
        /Sb5/fQppc9y5ChKdqEex2phvZP1FdYvKPzzelvEeVGGa6iIrwFKiMQGzFWAJILs35IfTVhGw0fayWas
        KCqvQi3dqX3kj6XISb65nt/RiK+tDNdQEV8DlBBprn+Bbj5MebtIs1Pe8E1Ufs35QlBU3oV6Oet+1uM0
        uLvwj+SfERklisr7XgEDcnzYbvLnuvOdQ08DitJTqOVk6J2sevJPhIoaRem5VwB4KEKhDosi3CuQMhSh
        UIdFEe4VSBkymJZZqK9azVFyUQQDACnjzyi7UF+0mqPkoggGAFLGf1F2oW6xmqPkoggGAFJENWUXaDlG
        a6rNTCUYRTAAkCL+mLIL9OM2M5RwFMEAQErYROZj0u+xmamEsoz1APkBVDLv13OsN7OWWssdAHkyk8yF
        WbboTrKYr6Sxkvw4DbKdO8zeg8+wKq3kFICQyNvsaTIX4Lss5itpyFtdxkPCVPzMMZTLFvILQE5kI5ME
        IvkfMhfcf6F0bnbKl+Hkx3LIt+Jn6sP9aQFgBdnjMJ/8dfESx8803Teg7/d/FhC9m4qv/AN6Z4nznkqk
        IDey3s96gvx+aiFNM8isn7DqQj+NdNNNAfdpwYQJ+qHaWv3p/fv11/r6PP0V//vKhg16Pv8u4O9k7OCw
        lW+SAiQQxFsoothxkFH/ybot7ANJObJ1+NuUcY+Gsc6tXq2fPHZMf/3ECaOuHT2qz/BnMv+2XxKO3YVt
        5ZFyhPVdsl9B0iqZ/pNDM7Dg5yYSUyDrXslbP6jiZ0paA6Y0WPdZ+k5lhwyaSL8p7LQLlJ8kfv9nWTVh
        H4hDyCDooPvVsmhRViX/1unT+sV77tHX3/Qm/fqDD+rXr1zx/v3Sfffpb585o3ctNEYnfsLatyojpPKb
        NqZAhUsOFZGwWRJx9wxrVuin4RYLKOOlI03/zx44cKPiP8cV//rly1pfvZpT1+680/tbGixpcc2z9u3K
        BHnzBxVkCbUtRz1LDD/ps06wlEeQTg5SRplbM2PGjcr/wrlz+ldvfeuQlX9AG+bMMZXhDmvfrgyQPn9Q
        s/9T5C9eASAuZAHUoHLXW1l5o/KHrfgDOr9+vakcX7D27RKOjPabBvyk2fSQxXwBd5AAKIPK34Xqaq/Z
        n8+bf0BXt20zGQCCrAQgp8KYbtgVm5kCTiFv58EtgBUrvMG9fCu/6FxNjak8n7f27RKMLPIxzfN/ymam
        gHMcoIwyWD1jRkGVX1Qze7bJAPZZ+3YJRmLvmwb8ltvMFHAOWQadNQvw7IULeVf+Z86fN1V+zAIEIMt7
        M2/WJ6zmCLjKVymjLHZWVuZtAB3cdchMh/wjzYABWSCRebOiPs4JgDBcIsNY1Ht37Qpd+d+9c2fQNPa9
        lr5T4nmRsm/WSqs5Aq4iewFk3X5WBb6yZYt+7aGHAiu+/O6Burqgyi+BV7AXIADp72fesIlWcwRcRnbu
        GdejLJkyRb+HWwNPnj2rrz/4oKdr/O+H+WeLJ08OqvySVqeVb1ImyHHbMACQJN5F5spciN5e4ryXHaYg
        FYipBmwie1Ikmk+xlf8RQkSgIfkSZd+441ZzBICPxPUrNCbgJQv5LUtM04Aft5ojAG6yhPUxCrc9XT4j
        EYRXWMlpmbKDzA6KhUAgSVSQ3yJ4jPUs+WNX1/v//bn+31VYyltZI1Fof0TZJvAXNjMFACgd2AwEgMPI
        duDvUbYBSPgqmAAADjBUQBCMCQCQct5BuadWZJOQTBEiJBgAKUQWTUglj2oVFpR8/ZT1A9YXWB8i3+Dn
        EHAWhAWHZOxHptvklB6spHMUGRN4gewXRsiuZJ5dIvYCBxk4Gsy0ZRhyS59mzSTgJBI3UEKHvY/1RfIP
        uniF7BdKqLSSqeItBABIBWLsEidvPauL/N1zckx5LhMQ42+3kVkAQPwMY+1h/RsFm8DrrF22MggAiB8x
        gj7WS2Q2gZcJx5oDkHpka+0zZDaBa6yx9rIGACgFk8kPq20ygbdZzBcAoETMJfP5ka8R9uED4AQbyRxF
        +vdtZgoAUDp+l8ytgOk2MwUAKA2zyN9AlGkCF2xmCgBQOj5A2QbwmNUcAQBKxm7KNgAJ0DnKZqYAAKVB
        KvpPKNsE1trMFACgdHyesg2gy2qOAAAl408o2wBwBDcAjmA6Ueqq1RwBAEqGomwDUBbzAwAoIYpgAAA4
        iyIYAADOoggGAICzKIIBAOAsimAAADiLIhgAAM6iCAYAgLMoggEA4CyKYAAAOIsiGAAAzqIIBgCAsyiC
        AQDgLIpgAAA4iyIYgHUus35AuU9zhSAonKQuXaIyoZHs3zAISpveYDVQGSDRV2zfLAhKo8oispEi+zcK
        gtIoRWWAIvs3CoLSKEVlgKKMjPedvFs/+vhTEASFlNSZzHpEMAAIckMwAAhyWKk1gMe/+A391WsvQBCU
        Q+cuvjmdBvD5J57Tzz7/EgRBOXTv5bfAACDIVcEAIMhhwQAgyGHBACDIYcEAIMhhwQAgyGHBACDIYcEA
        Am5KGCE9pFcO6cEA8lRmukFCekivHNKDAcAAkJ7D6cEAYABIz+H0YAAwAKTncHowABgA0nM4PRgADADp
        OZweDAAGgPQcTg8GAANAeg6nBwOAASA9h9ODARRwU5K8sgvpIT2sBMReAAgqWjAACHJYMAAIclgwAAhy
        WDAACHJYMAAIclgwAAhyWDAACHJYMAAIclgwgICbkuSVXUgP6WElIPYCID2kBwO4VTAApIf0YAAwAKSH
        9GAAMACkh/RgADAApOd4ejAAGADSczg9GAAMAOk5nB4MAAaA9BxODwYAA0B6DqcHAyjgpiR5ZRfSQ3pY
        CYi9ABBUtGAAEOSwYAAQ5LBgABDksGAAEOSwYAAQ5LBgABDksGAAEOSwYAAQ5LBgAAE3Jckru8Km55qS
        /jxspQcDyFOZ6QYp6em5pqQ/D1vpwQBgAE4o6c8DBhAtimAAUBk9DxhAtCiCAUBl9DxgANGiCAYAldHz
        gAFEiyIYAFRGzwMGEC2KYABQGT0PGEC0KIIBQGX0PGAA0aIIBgCV0fOAAUSLopgMIOkru2yvuEuqkv48
        bKUHA4AgyCgYAAQ5LBgABDksGAAEOSwYAAQ5LBgABDksGAAEOSwYAAQ5LBgABDksGAAEOSwYAAQ5LBgA
        BDmsVBkABEGRSFEZoMj+jYKgNEpRGXCV7N8oCEqjpG4lngayf6MgKG16g1VPZcIl1vfJ/k2DoDRI6tJ9
        BAAAAAAAAAAAAAAAAAAAAAAAAACQg/8HOUXMeb1ZBD8AAAAASUVORK5CYII=
</value>
  </data>
</root>